#!/bin/bash
#Author: Clement Delalande - http://github.com/iKlem
#Version : 0.8.0

# Colors
blue="\e[96m"
red="\e[91m"
green="\e[32m"
yellow="\e[93m"

bold="\033[1m"
default="\e[0m"

# Node maximum version to install.
nodeVersionX=6

# Directory where the screepsServer is cloned.
rootDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# Screeps bin folder, for launching the screeps commands.
screepsBin="${rootDir}/node_modules/screeps/bin"

# TODO: change this variable when the SSMC will be implemented
# lastLogDir="$( basename $( ls -td -- ${server}/logs/* | head -n 1 ) )"
# TODO: change this variable when the mod manager will be implemented
# mods="${rootDir}/mods"

# These are dependencies for Debian based distributions.
depsDebian=("python2.7" "tmux" "nodejs" "build-essential")
# These are dependencies for Archlinux based distributions.
depsArch=("python2.7" "tmux" "node")
# Array of missing dependencies if missing when checking.
missingDeps=()

# Used for the fail safe if the server doesn't launch properly.
restartFailSafeCpt=0
restartFailSafeMax=2

checking_package_manager() {
  [ "$(command -v $1)" ]
}

checking_dependencies () {
  nbDeps=0
  if [ $1 -eq 1 ]; then
    echo -e " │ ${bold}${blue}Checking dependencies${default}"
  else
    echo -e " ╭ ${bold}${blue}Checking dependencies${default}"
  fi
  # If a distribution isn't there, you can fork the project and add the missing
  # requirements or open an issue.

  # Checking the package manager.
  if checking_package_manager dpkg-query ; then
    distro="debian" # Using Debian base distributions
    deps=("${depsDebian[@]}")
  elif checking_package_manager pacman ; then
    distro="arch" # Using Archlinux base distribution
    deps=("${depsArch[@]}")
  fi

  # Looping through the dependencies for the selected distribution
  for pkg in "${deps[@]}"; do
    echo -e " │  Checking for \c"
    printf "%20s..." "$pkg"
    sleep 0.5
    if [ "${distro}" == "debian" ]; then
      dpkg-query -W -f='${Status}' "${pkg}" 2> /dev/null | grep -q -P '^install ok installed$'
    elif [ "${distro}" == "arch" ]; then
      pacman -Qo "${pkg}" &> /dev/null
    fi
    # If the package is missing, it will be added to the missingDeps array.
    if [ $? -eq 1 ]; then
      echo -e "\t[ ${bold}${red}MISSING${default} ]"
      ((nbDeps++))
      missingDeps+=("${pkg}")
    else
      if [[ "${pkg}" == "nodejs" || "${pkg}" == "node" ]]; then
        check_for_node
      else
        echo -e "\t[ ${bold}${green}OK${default} ]"
      fi
    fi
  done
}

check_for_node () {
  echo ""
  echo -e " │      Checking version...\c"
  printf "%10s..." "$(node -v)"
  nodeVersion=$(node -v | cut -c2)
  if [[ $nodeVersion -eq $nodeVersionX ]]; then
    echo -e "\t[ ${bold}${green}OK${default} ]"
  elif [[ $nodeVersion -lt $nodeVersionX ]]; then
    echo -e "\t[ ${bold}${red}WRONG VERSION${default} ]"
    echo -e " │      Node version needed: ${bold}${nodeVersionX}${default} - Yours: ${bold}$nodeVersion${default}"
    echo -e " │      Please downgrade node to version ${bold}${nodeVersionX}${default}."
    echo -e " │      See https://nodejs.org/en/download/package-manager/ for more informations."
    ((nbDeps++))
    missingDeps+=("${pkg}")
  elif [[ $nodeVersion -gt $nodeVersionX ]]; then
    echo -e "\t[ ${bold}${red}WRONG VERSION${default} ]"
    echo -e " │      Node version needed: ${bold}${nodeVersionX}${default} - Yours: ${bold}$nodeVersion${default}"
    echo -e " │      Please update node to version ${nodeVersionX}."
    echo -e " │      See https://nodejs.org/en/download/package-manager/ for more informations."
    ((nbDeps++))
    missingDeps+=("${pkg}")
  fi
}

install_dependencies () {
  echo " │"
  if [ $nbDeps -gt 0 ]; then
    read -n1 -r -e -p " │  Do you want the script to launch the install command ? [Y/n] " yn
    if [[ (${yn} == "y") || (${yn} == "") ]]; then
      echo -e " │ ${bold}${blue}Installing dependencies${default}"
      if [ "${distro}" == "debian" ]; then
        sudo apt-get install "${missingDeps[@]}"
      elif [ "${distro}" == "arch" ]; then
        # TODO: do some test with a new arch linux distro (vm?)
        # yaourt -S "${missingDeps[@]}"
        echo "You will need to install these dependencies manually : ${missingDeps[@]} "
        echo "The auto-install with Archlinux distributions will be implemented in a next update."
        echo "Sorry for the inconvenience."
      fi
    else
      print_warning "Installation for dependencies stopped!" 1
      echo ""
      exit 0
    fi
  fi
  echo -e " ╰── ${bold}${green}All dependencies are installed!${default}"
}

# Since screeps is installed with NPM we have to create a package file.
# This can avoid loosing user modified package file
checking_for_package_file () {
  echo -e " │ ${bold}${blue}Checking for package.json file${default}"
  if [ -e ${rootDir}/package.json ]; then
    echo -e " │  ${bold}${green}The package.json file exist!${default}"
  else
    print_warning "The package.json file is missing!" 0
    sleep 0.5
    echo " │   Generating package.json file with default options..."
    if [ ! -d ${rootDir}/node_modules ]; then
      mkdir node_modules
    fi
    npm init -y > /dev/null
    echo " │   Done!"
  fi
}

install_screeps () {
  echo -e " │ ${bold}${blue}Downloading Screeps server${default}"
  echo -e " ┊"
  echo ""
  npm i -S screeps
  echo ""
  echo -e " ┊"
  echo -e " │  ${bold}${green}Screeps server downloaded!${default}"
  echo -e " │"
  echo -e " │ ${bold}${blue}Starting configuration${default}"
  echo -e " ┊"
  sleep 0.25
  echo ""
  node ${screepsBin}/screeps.js init
  echo ""
  echo -e " ┊"
  # echo -e " │  ${bold}${green}Done!${default}"
}

install_all () {
  sleep 2
  echo -e " ╭ ${bold}${blue}Installation${default}"
  read -n1 -r -e -p " │  Installing in ${rootDir} ? [Y/n] " yn
  if [[ (${yn} == "y") || (${yn} == "") ]]; then
    echo " │"
    checking_dependencies 1
    echo " │"
    checking_for_package_file
    echo " │"
    if [ -d "${screepsBin}" ]; then
      echo -e " ╰── ${bold}${green}The server is already installed! You can launch it with the \"start\" command.${default}"
    else
      install_screeps
      echo -e " ╰── ${bold}${green}The server has been fully installed ! You can launch it with the \"start\" command.${default}"
    fi
    if [ $nbDeps -gt 0 ]; then
      echo -e "\n[ ${yellow}WARNING${default} ] Some dependencies aren't installed. Before starting your server you will need to install them."
      echo -e "            Command to run in root user : '${0} install-deps' OR 'apt-get install ${missingDeps[@]}'"
      # echo -e "\n[ ${blue}INFO${default} ] NodeJS version need to be ${nodeVersionX}."
    fi
  else
    print_error "Installation aborted" 9
  fi
}

# TODO: find why sometimes it fails
# This will check if the screeps server is up (not tmux session).
check_server_up () {
  port=$(awk '/port = / && !/cli/' ${rootDir}/.screepsrc | cut -c8-12)
  $(nc -z 127.0.0.1 ${port})
  retval=$?
}

# This will check if the tmux session is up (not screeps server).
check_tmux () {
  retval=$(tmux list-sessions 2>&1 | awk '{print $1}' | grep -Ec "screeps")
}

# TODO: add new command to avoid relaunch OR to relaunch the screeps server.
update_screeps () {
  stop_server
  echo ""
  sleep 0.5
  echo -e " ╭ ${bold}${blue}Updating server${default}"
  check_server_up
  if [ $retval -eq 1 ]; then
    if [ $2 -eq 1 ]; then
      npm i -S screeps
    else
      npm i -S screeps > /dev/null
    fi
    sleep 0.5
    echo -e " ╰── ${bold}${green}Server updated!${default}"
    echo ""
    if [ "$1" -eq 0 ]; then
      start_server
    else
      echo -e "    ${bold}You can now launch your server.${default}"
    fi
  else
    echo -e "Can't stop server..." # TODO: add some style here dude.
  fi
}

launch_tmux_session() {
  tmux new-session -s screeps -d && tmux send-keys -t screeps "node ${screepsBin}/screeps.js start" ENTER
}

start_server () {
  echo -e " ╭ ${bold}${blue}Starting server${default}"

  check_server_up
  sleep 0.5
  if [ $retval -eq 0 ]; then
    print_error "Server is already started. You can't start more than 1 server with this script (wait for a next update ;) )" 2
  else
    if [ -d "${screepsBin}" ]; then
      cpt=0
      # Creating tmux session for the server.
      launch_tmux_session
      check_server_up
      echo -e " │  Waiting for server to start\c"
      # This is the "Fail safe"
      # It will loop 16 times and each loop it check if the server is up.
      # If not, it stop the tmux session and ask if the user want to relaunch.
      # If the user has been asked 3 times, the script stop and launch an error.
      # This avoid an infinite loop when waiting for the server to start.
      while [ $retval -eq 1 ]; do
        check_server_up
        ((cpt++))
        if [ $cpt -eq 16 ]; then
          echo -e "\n │  ${red}Error:${default} ${bold}Server take too long to start!${default}"
          if [ ${restartFailSafeCpt} -lt ${restartFailSafeMax} ]; then
            echo -e " │"
            read -n1 -r -e -p " │  Do you want to relaunch the server ? [Y/n] " yn
            if [[ (${yn} == "y") || (${yn} == "") ]]; then
              ((restartFailSafeCpt++))
              echo -e " │"
              echo -e " │  ${blue}${bold}Restarting...${default}"
              echo -e " │"
              echo -e " │  Waiting for server to start\c"
              tmux kill-session -t screeps
              sleep 1
              cpt=0
              launch_tmux_session
            else
              tmux kill-session -t screeps
              print_error "User doesn't want to relaunch." 15
            fi
          else
            tmux kill-session -t screeps
            print_error "Can't launch the server (RESTART_FAILSAFE_MAX Error)." 30
          fi
        fi
        sleep 1
        echo -e ".\c"
      done
      echo -e "\n ╰─┬ ${green}${bold}Server started${default}"
      echo -e "   │ Type 'tmux attach -t screeps' to get to the server screen"
      echo -e "   │ Do CTRL+B and d to detach from the server screen"
      echo -e "   │ More commands/informations with the \"$0 help\" command"
      echo -e "   ╰── "
    else
      print_error "The server isn't installed. Please launch the installer with \"$0 install\"" 4
    fi
  fi
}

stop_server () {
  echo -e " ╭ ${bold}${blue}Stopping server${default}"
  check_server_up
  if [ $retval -eq 0 ]; then
    cpt=0
    tmux send "C-c" # Doing CTRL + C in the tmux session
    check_server_up
    echo -e " │  Waiting for server to stop\c"
    while [ $retval -eq 0 ]; do
      check_server_up
      ((cpt++))
      if [ $cpt -eq 6 ]; then
        echo -e "\n${yellow} │  Warning: Server take too long to stop! Forcing...${default}\c"
        break
      fi
      sleep 1
      echo -e ".\c"
    done
    echo -e "\n ╰── ${bold}${green}Server is stopped!${default}"
    tmux kill-session -t screeps
  else
    print_warning "Server isn't started. No need to stop it" 1
  fi
}

show_status () {
  echo -e " ╭ ${bold}${blue}Checking server status${default}"
  check_server_up
  sleep 0.5
  if [ $retval -eq 0 ]; then
    echo -e " ╰── ${bold}${green}Server is UP${default}."
  else
    echo -e " ╰── ${bold}${red}Server is DOWN${default}."
  fi
}

open_cli_console () {
  echo -e " ╭ ${bold}${blue}Opening Screeps CLI...${default}"
  check_server_up
  sleep 0.5
  if [ $retval -eq 0 ]; then
    echo " ╰── (CTRL+C two times to quit)"
    echo ""
    node "${screepsBin}"/screeps.js cli
  else
    print_error "The server can't be reached. Maybe it's not started?" 5
  fi
}

# Print error on the console
# param $1 message String
# param $2 exitCode integer
print_error () {
  echo -e " ╰── ${red}ERROR${default}:$2 - ${bold}$1${default}\n"
  exit $2
}

# Print error on the console
# param $1 message String
# param $2 changeStyle integer
print_warning () {
  if [ $2 -eq 0 ]; then # changeStyle = 0
  echo -e " │   ${yellow}WARNING${default} - ${bold}$1${default}"
else                  # changeStyle = 1
  echo -e " ╰── ${yellow}WARNING${default} - ${bold}$1${default}"
fi
}

usage () {
  echo -e " ${bold}${yellow}Usage${default} : $0 ${blue}cmd${default}"
  echo ""
  echo -e " ╭${bold}${blue} Commands${default}"
  echo -e " │  install,              i \t Install the dependencies and the Screeps server."
  echo -e " │  install-deps,         id\t Install the dependencies."
  echo -e " │  start,                st\t Launch the server."
  echo -e " │  stop,                 sp\t Stop the server."
  echo -e " │  restart,              r \t Restart the server."
  echo -e " │  update,               u \t Update the server."
  echo -e " │       --no-restart       \t Do not launch the server after the update"
  echo -e " │       --verbose          \t Show the node update/build process"
  echo -e " │  status,               s \t Show the server status."
  echo -e " │  cli                     \t Open the Screeps CLI (server need to be started)."
  # TODO: add the SSMC :)
  # echo -e " ├── console,         c \t Open the SSMC (Screeps Server Manager Console)."
  echo -e " │  help,                 h \t Show this command list."
  echo -e " ╰──────────"
  echo ""
}

# IDEA: add "tmux set mouse-select-pane" when creating the SSMC.

echo ""
echo -e " ╭ ${bold}${blue}Linux Screeps Server Manager${default}"
echo -e " │  Made by iKlem  -  v0.8.0"
echo -e " │  https://github.com/iKlem"
echo -e " ╰──────"
echo ""
case "$1" in
  i|install)
    install_all
    ;;
  id|install-deps)
    checking_dependencies 0
    install_dependencies
    ;;
  st|start)
    start_server
    ;;
  sp|stop)
    stop_server
    ;;
  r|restart)
    stop_server
    echo ""
    start_server
    ;;
  s|status)
    show_status
    ;;
  cli)
    open_cli_console
    ;;
  config)
    start_config
    ;;
  u|update)
    noRestart=0
    verbose=0
    if [[ "$2" == "--no-restart" || "$3" == "--no-restart" ]]; then
      noRestart=1
    fi
    if [[ "$2" == "--verbose" || "$3" == "--verbose" ]]; then
      verbose=1
    fi
    update_screeps ${noRestart} ${verbose}
    ;;
  h|help)
    usage
    ;;
  *)
    if [ -n "$1" ]; then
      echo -e "${red}ERROR${default} - ${bold}Unknown command: $0   $1${default}\n"
    fi
    usage
    exit 1
    ;;
esac
echo ""
exit 0
