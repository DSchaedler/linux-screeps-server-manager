#!/bin/bash

blue="\e[34m"
red="\e[91m"
green="\e[32m"
yellow="\e[93m"
default="\e[0m"

rootDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

screepsBin="${rootDir}/node_modules/screeps/bin"
logs="${rootDir}/logs"
# lastLogDir="$( basename $( ls -td -- ${server}/logs/* | head -n 1 ) )"
mods="${rootDir}/mods"

deps=("python2.7" "tmux" "nodejs")
missingDeps=()

checking_dependencies () {
  nbDeps=0
  echo -e " ├─┬ ${yellow}Checking dependencies${default}"
  # For each dependencies we check it with dpkg-query.
  # TODO: test on other distro.
  for pkg in "${deps[@]}"; do
    if [ "${deps[-1]}" == "${pkg}" ]; then
      echo -e " │ └─── Checking for $pkg... \t\c"
    else
      echo -e " │ ├─── Checking for $pkg... \t\c"
    fi
    sleep 0.5
    dpkg-query -W -f='${Status}' "${pkg}" 2> /dev/null | grep -q -P '^install ok installed$'
    if [ $? -eq 1 ]; then
      echo -e "[ ${red}MISSING${default} ]"
      ((nbDeps++))
      missingDeps+=("${pkg}")
    else
      echo -e "[ ${green}OK${default} ]"
    fi
  done
}

install_dependencies () {
  if [[ $EUID -ne 0 ]]; then
  # If user launch the script without sudo
    if [ $nbDeps -gt 0 ]; then
      return 1
    fi
    return 0
  else
    # And here with sudo in front of command
    apt-get intall "${missingDeps[@]}"
    return 0
  fi
}

checking_node () {
  echo -e " ├── ${yellow}Checking for NodeJS, npm & node-gyp${default}"
  if [[ $EUID -eq 0 ]]; then
    # TODO: Change to a check instead of install them
    curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash
    sudo apt-get install -y nodejs
    sudo npm install npm@latest -g
    sudo npm install node-gyp@latest -g
  else
    echo -e " ┊\n"
    echo "No check have been added for npm and node-gyp."
    echo "Please run as root these lines after the installation : "
    #echo "curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash"
    #echo "sudo apt-get install -y nodejs"
    echo "sudo npm install npm@latest -g"
    echo "sudo npm install node-gyp@latest -g"
    echo ""
    sleep 10
  fi
}

checking_for_package_file () {
  echo -e " ├─┬ ${yellow}Checking the package.json file${default}"
  if [ -e ${rootDir}/package.json ]; then
    echo -e " │ ${green}└─── The package.json file is here.${default}"
  else
    echo -e " │ ${red}├─── The package.json file is missing!${default}"
    echo -e " │ ${blue}└─── Generating default package.json...${default}"
    echo -e " ┊\n"
    wget "https://raw.githubusercontent.com/iKlem/linux-screeps-server-manager/master/package.json"
    # npm init -f --silent # Generating or Downloading a premade one ?
  fi
}

install_screeps () {
  echo -e " ├─┬ ${yellow}Downloading Screeps server${default}\n"
  npm install --save screeps@latest
  echo -e " │ ${green}└─── Screeps server downloaded${default}"
  echo -e " │"
  echo -e " ├── ${yellow}Starting configuration${default}"
  echo -e " ┊\n"
  node ${screepsBin}/screeps.js init
  echo -e "\n ┆      ${green}Done!${default}"
}

install_all () {
  sleep 0.5
  echo -e "${yellow}│${blue} Installation ${default}"
  echo -e "${yellow}└┬─────────────┘${default}"
  read -e -p " ├── Installing in ${rootDir} ? [y] " ok
  if [ -z "${ok}" ]; then
    echo " ┊"
    checking_dependencies
    sleep 0.5
    echo " ┊"
    checking_node
    sleep 0.5
    echo " ┊"
    checking_for_package_file
    sleep 0.5
    echo " ┊"
    install_screeps
    sleep 0.5
    echo -e "${green} │"
    echo -e " └─── The server has been fully installed ! You can launch it with the \"start\" command.${default}"
    if ! install_dependencies; then
      echo -e "\n[ ${yellow}WARNING${default} ] Some dependencies aren't installed. Before starting your server you will need to install them."
      echo -e "            Command to run in root user : apt-get install ${missingDeps[@]}"
    fi
  else
    echo -e "${red} │"
    echo -e " └────── Installation aborted${default}"
    echo ""
    exit 9
  fi
}

check_server_up () {
  sleep 0.5
  retval=$(tmux list-sessions 2>&1 | awk '{print $1}' | grep -Ec "screeps")
}

update_screeps () {
  # TODO: add visual and do the stop & start here.
  stop_server
  echo -e "\n${yellow}│${blue} Updating server ${default}"
  echo -e "${yellow}└─────────────────┘${default}\n"
  npm update screeps
  start_server
}

start_server () {
  echo -e "${yellow}│${blue} Starting server ${default}"
  echo -e "${yellow}└┬────────────────┘${default}"
  check_server_up
  if [ $retval -eq 1 ]; then
    echo -e "${red} └── Error: Server is already started. You can't start more than 1 server with this script (wait for a next update ;) )${default}\n  "
    exit 2
  else
    if [ -d "${screepsBin}" ]; then
      tmux new-session -s screeps -d && tmux send-keys -t screeps "node ${screepsBin}/screeps.js start" ENTER
      check_server_up
      if [ $retval -eq 1 ]; then
        echo -e " ${green}└─┬ Server started${default}"
        echo -e "   ├─── Type 'tmux attach -t screeps' to get to the server screen"
        echo -e "   ├─── Do CTRL+B and d to detach from the server screen"
        echo -e "   └─── More commands/informations with the \"$0 help\" command"
      else
        echo -e "[ ${red}ERROR${default} ]"
        echo -e " └── There was an error when starting the server..."
        exit 3
      fi
    else
      echo -e "[ ${red}ERROR${default} ]"
      echo -e " └── The server isn't installed. Please launch the installer with \"$0 install\"\n"
      exit 4
    fi
  fi
}

stop_server () {
  echo -e "${yellow}│${blue} Stopping server ${default}"
  echo -e "${yellow}└┬────────────────┘${default}"
  check_server_up
  if [ $retval -eq 1 ]; then
    tmux kill-session -t screeps
    sleep 0.5
    check_server_up
    if [ $retval -eq 0 ]; then
      echo -e "${green} └── Server is stopped!${default}"
    else
      echo -e "[ ${green}OK?${default} ]"
    fi
  else
    echo -e "${red} └── ERROR: Server isn't started. No need to stop it.${default}\n"
  fi
}

open_cli_console () {
  echo -e "${yellow}│${blue} Opening Screeps CLI...${default}   (CTRL+C two times to quit)"
  echo -e "${yellow}└┬───────────────────────┘${default}"
  check_server_up
  if [ $retval -eq 1 ]; then
    echo ""
    node "${screepsBin}"/screeps.js cli
  else
    echo -e "${red} └── ERROR: The server can't be reached. Maybe it's not started?${default}\n"
    exit 5
  fi
}

usage () {
  echo "Usage : $0 cmd"
  echo ""
  echo -e "${yellow}│${blue} Commands ${default}"
  echo -e "${yellow}└┬─────────┘${default}"
  echo -e " ├── install, i \t - Install the dependencies and the Screeps server"
  echo -e " ├── start,   st\t - Launch the server"
  echo -e " ├── stop,    sp\t - Stop the server"
  echo -e " ├── cli        \t - Open the Screeps CLI (server need to be started)"
  echo -e " ├── update,  u \t - Update the server"
  echo -e " └── help,    h \t - Show this command list"
  echo ""
}

echo -e "${yellow}┌──────────────────────────────────┐${default}"
echo -e "${blue}  Screeps Server Manager for Linux${default}"
echo -e "${yellow}└┬─────────────────────────────────┘${default}"
echo " ├── Made by iKlem - v0.2"
echo " └── https://github.com/iKlem"
echo ""
case "$1" in
  i|install)
    install_all
    ;;
  st|start)
    start_server
    ;;
  sp|stop)
    stop_server
    ;;
  cli)
    open_cli_console
    ;;
  config)
    start_config
    ;;
  u|update)
    update_screeps
    ;;
  h|help)
    usage
    ;;
  *)
    if [ -n "$1" ]; then
      echo -e "[ ${red}ERROR${default} ] -> Unknown command: $0 $1\n"
    fi
    usage
    exit 1
    ;;
esac
echo ""
exit 0
